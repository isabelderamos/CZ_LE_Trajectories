x==85 ~ 0,
x!=85 ~ lead(ex)+1-ax),
e_dagger=(rev(cumsum(dx*lost_length)+0.5*ex_85*lx_85))/lx)
# extracting LE
le <- lt %>% filter(x==age_num) %>% pull(ex)
# extracting 95% CI
ci <- ci_dta %>% pluck("CIex") %>% unname()
# extracting e_dagger
e_dagger <- lt %>% filter(x==age_num) %>% pull(e_dagger)
# building df that summarizes results
data.frame(le=le,
lci=ci[1],
uci=ci[2],
lv=e_dagger)
}
# TESTING E_DAGGER
e_dag_results <- dta %>% filter(year5=='2015-2019') %>%
group_by(age_5yr_group, metro2, race) %>%
summarise(count=sum(count, na.rm=T),
pop_denom=sum(pop_denom, na.rm=T)) %>%
ungroup() %>%
# creating age-specific death rates variable, Mx
mutate(mx=count/pop_denom,
age_5yr_group=as.numeric(age_5yr_group)) %>%
arrange(metro2, race, age_5yr_group) %>%
group_by(metro2, race) %>%
# group_modify generates a data frame of outputs
group_modify(~e_dagger(., age_num=0))
e_dag_results
# COMBINING LV MEASURES INTO ONE DATAFRAME
variance %>% bind_rows(results_baseline %>% mutate(lv_measure=rep("s0"))) %>%
bind_rows(., e_sd_10 %>% mutate(lv_measure=rep("s10"))) %>%
bind_rows(., e_sd_35 %>% mutate(lv_measure=rep("s35"))) %>%
bind_rows(., e_sd_65 %>% mutate(lv_measure=rep("s65"))) %>%
bind_rows(., e_dag_results %>% mutate(lv_measure=rep("e_dagger")))
# COMBINING LV MEASURES INTO ONE DATAFRAME
variance %>% bind_rows(results_baseline %>% mutate(lv_measure=rep("s0"))) %>%
bind_rows(., e_sd_10 %>% mutate(lv_measure=rep("s10"))) %>%
bind_rows(., e_sd_35 %>% mutate(lv_measure=rep("s35"))) %>%
bind_rows(., e_sd_65 %>% mutate(lv_measure=rep("s65"))) %>%
bind_rows(., e_dag_results %>% mutate(lv_measure=rep("e_dagger"))) %>% view()
# COMBINING LV MEASURES INTO ONE DATAFRAME
lv_dta <- variance %>% bind_rows(results_baseline %>% mutate(lv_measure=rep("s0"))) %>%
bind_rows(., e_sd_10 %>% mutate(lv_measure=rep("s10"))) %>%
bind_rows(., e_sd_35 %>% mutate(lv_measure=rep("s35"))) %>%
bind_rows(., e_sd_65 %>% mutate(lv_measure=rep("s65"))) %>%
bind_rows(., e_dag_results %>% mutate(lv_measure=rep("e_dagger"))) %>%
select(-lci, uci)
lv_dta
variance %>% bind_rows(results_baseline %>% mutate(lv_measure=rep("s0"))) %>%
bind_rows(., e_sd_10 %>% mutate(lv_measure=rep("s10"))) %>%
bind_rows(., e_sd_35 %>% mutate(lv_measure=rep("s35"))) %>%
bind_rows(., e_sd_65 %>% mutate(lv_measure=rep("s65"))) %>%
bind_rows(., e_dag_results %>% mutate(lv_measure=rep("e_dagger"))) %>%
select(-lci, -uci)
# COMBINING LV MEASURES INTO ONE DATAFRAME
lv_dta <- variance %>% bind_rows(results_baseline %>% mutate(lv_measure=rep("s0"))) %>%
bind_rows(., e_sd_10 %>% mutate(lv_measure=rep("s10"))) %>%
bind_rows(., e_sd_35 %>% mutate(lv_measure=rep("s35"))) %>%
bind_rows(., e_sd_65 %>% mutate(lv_measure=rep("s65"))) %>%
bind_rows(., e_dag_results %>% mutate(lv_measure=rep("e_dagger"))) %>%
select(-lci, -uci)
lv_dta
lv_dta %>% select(-le) %>% spread(lv_measure, lv)
# CREATING OVERALL METRO TO NONMETRO DISPARITY
e_dag_overall <- dta %>% filter(year5=='2015-2019') %>%
group_by(age_5yr_group, metro2) %>%
summarise(count=sum(count, na.rm=T),
pop_denom=sum(pop_denom, na.rm=T)) %>%
ungroup() %>%
mutate(mx=count/pop_denom,
age_5yr_group=as.numeric(age_5yr_group)) %>%
arrange( metro2, age_5yr_group) %>%
group_by(metro2) %>%
group_modify(~e_dagger(., age_num=0))
e_dag_overall
e_dag_overall
e_dag_overall %>% mutate(race=rep("Overall")) %>%
select(metro2, race, le, lci, uci, lv) %>%
bind_rows(., e_dag_results) %>%
arrange(metro2, race)
# MERGING OVERALL WITH RACE RESULTS
e_dag_results <- e_dag_overall %>% mutate(race=rep("Overall")) %>%
select(metro2, race, le, lci, uci, lv) %>%
bind_rows(., e_dag_results) %>%
arrange(metro2, race)
# COMBINING LV MEASURES INTO ONE DATAFRAME
lv_dta <- variance %>% bind_rows(results_baseline %>% mutate(lv_measure=rep("s0"))) %>%
bind_rows(., e_sd_10 %>% mutate(lv_measure=rep("s10"))) %>%
bind_rows(., e_sd_35 %>% mutate(lv_measure=rep("s35"))) %>%
bind_rows(., e_sd_65 %>% mutate(lv_measure=rep("s65"))) %>%
bind_rows(., e_dag_results %>% mutate(lv_measure=rep("e_dagger"))) %>%
select(-lci, -uci)
lv_dta
View(lv_dta)
lv_dta
lv_dta %>% view()
lv_dta %>% select(-le) %>% spread(lv_measure, lv)
lv_dta %>% select(-le) %>% spread(lv_measure, lv) %>%
group_by(metro2, race) %>%
cor()
cor()?
?cor()
lv_dta %>% select(-le) %>% spread(lv_measure, lv) %>%
group_by(metro2, race) %>%
cor(., method="spearman")
lv_dta_cor <- lv_dta %>% select(-le) %>% spread(lv_measure, lv)
shapiro.test(lv_dta_cor$s0)
ggqqplot(lv_dta_cor$s0, ylab="s0")
shapiro.test(lv_dta_cor$s10)
lv_dta_cor
shapiro.test(lv_dta_cor$s35)
shapiro.test(lv_dta_cor$s65)
shapiro.test(lv_dta_cor$var)
# FIRST, DO ALL LV MEASURES FOLLOW NORMAL DISTRIBUTION
# USE SHAPIRO-WILK NORMALITY TEST H0: NORMAL DIST, HA: NOT NORMAL DIST
shapiro.test(lv_dta_cor$e_dagger)
lv_dta_cor %>% group_by(metro2, race) %>%
cor(.$e_dagger, .$s0, method="pearson")
lv_dta_cor %>% group_by(metro2, race) %>%
cor.test(.$e_dagger, .$s0, method="pearson")
tmp <- lv_dta_cor %>% group_by(metro2, race) %>%
cor.test(.$e_dagger, .$s0, method="pearson")
tmp <- lv_dta_cor %>% group_by(metro2, race)
cor.test(tmp$e_dagger, tmp$s0, method="pearson")
cor.test(tmp$e_dagger, tmp$s10, method="pearson")
cor.test(tmp$e_dagger, tmp$s65, method="pearson")
cor.test(tmp$s0, tmp$s65, method="pearson")
cor.test(tmp$s0, tmp$var, method="pearson")
cor.test(tmp$e_dagger, tmp$var, method="pearson")
cor(tmp)
lv_dta_cor
cor(tmp)
corr(tmp)
tmp <- lv_dta_cor %>% group_by(metro2, race) %>% select(-metro2, -race)
tmp
tmp <- lv_dta_cor %>% group_by(metro2, race) %>% ungroup() %>%  select(-metro2, -race)
tmp
cor(tmp)
lv_dta_cor
lv_dta_cor %>% group_by(metro2, race)
lv_dta_cor %>% group_by(metro2, race) %>%
group_modify(., ~cor())
cor(tmp)
lv_dta_cor %>% group_by(metro2, race) %>%
group_modify(., ~cor())
lv_dta_cor
lv_dta_cor %>% ungroup() %>% select(-metro2, -race) %>% cor()
tmp
rm(tmp)
lv_dta_cor
lv_dta_cor %>% ungroup() %>% select(-metro2, -race) %>% cor()
lv_dta_cor %>% ungroup() %>% select(-metro2, -race) %>% cor(., method = "pearson")
# NEXT, FIND PEARSON CORRELATION COEFFICIENTS FOR LV MEASURES
install.packages("corrplot")
lv_dta_cor %>% ungroup() %>% select(-metro2, -race) %>% rquery.cormat()
library(corrplot)
lv_dta_cor %>% ungroup() %>% select(-metro2, -race) %>% rquery.cormat()
source("http://www.sthda.com/upload/rquery_cormat.r")
lv_dta_cor %>% ungroup() %>% select(-metro2, -race) %>% rquery.cormat()
lv_dta_cor %>% ungroup() %>% select(-metro2, -race) %>% rquery.cormat(., type="full")
save.image("~/Desktop/Git/MS_thesis_project/Analysis/2_9_22workspace.RData")
setwd("~/Desktop/Git/MS_thesis_project/Data/pop")
library(data.table)
library(tidyverse)
fips_msa_xwalk = fread("../Data/pop/fips_msa_xwalk.csv",
colClasses = 'character')
setwd("~/Desktop/Git/MS_thesis_project/Analysis")
fips_msa_xwalk = fread("../Data/pop/fips_msa_xwalk.csv",
colClasses = 'character')
setwd("~/Desktop/Git/MS_thesis_project/Clean")
# using bridged_pop_county_asrhLT as more appropriate to build life tables with age groups 0,1,5,10...
pop_county <- read.csv("../Data/bridged_pop_county_asrhLT.csv", header=TRUE, sep = ',') %>%
as_tibble() %>%
mutate(year=as.character(year),
fips=as.character(fips),
fips=format_5digfips_v(fips)) %>%
rename(`sex`=`male`,
`race`=`hispanic_bridged`)
library(dplyr)
library(tidyverse)
library(stringr)
library(purrr)
#~~~~ (1) format fips ~~~~#
# create function that pads all fips (adds back leading zeroes)
format_5dig_fips <- function(fp) {
ifelse(str_length(fp)==4,
str_pad(fp, width=5, side="left", pad="0"),
fp)
}
format_5digfips_v <- Vectorize(format_5dig_fips)
### Get mortality file names
# NOTE: individual level mortality files obtained from NCHS were cleaned and exported as .rdata's beforehand
df_mort_files = tibble(file = list.files(path='../Clean/Raw', pattern = "mort[1|2]", full.names = TRUE)) %>%
mutate(year = str_sub(file,18,21) %>% parse_integer() ) %>%
arrange(year)
# using bridged_pop_county_asrhLT as more appropriate to build life tables with age groups 0,1,5,10...
pop_county <- read.csv("../Data/bridged_pop_county_asrhLT.csv", header=TRUE, sep = ',') %>%
as_tibble() %>%
mutate(year=as.character(year),
fips=as.character(fips),
fips=format_5digfips_v(fips)) %>%
rename(`sex`=`male`,
`race`=`hispanic_bridged`)
POP_COUNTY
pop_county
as.data.frame(table(pop_county$age_5yr_group))
library(DemoTools)
test <- graduate(value=pop_county$pop_county, age=pop_county$age_5yr_group)
test <- graduate(Value=pop_county$pop_county, Age=pop_county$age_5yr_group)
test <- graduate(Value=pop_county$pop_county, Age=pop_county$age_5yr_group, AgeInt=age2int(Age))
test <- graduate(Value=pop_county$pop_county, Age=pop_county$age_5yr_group, AgeInt=age2int(pop_county$age_5yr_group))
pop_county %>% filter(year%in%"2010", fips%in%"01001", sex%in%"0", race%in%"H")
load('../Clean/pop_denoms.rdata')
pop_denoms
test<- pop_denoms %>% filter(year%in%"2010", fips%in%"01001", sex%in%"0", race%in%"H")
dta <- pop_denoms %>% filter(year%in%"2010", fips%in%"01001", sex%in%"0", race%in%"H")
rm(test)
dta %>% graduate(Value=pop_denom, Age=age_5yr_group, AgeInt=age2int(age_5yr_group))
dta
as.data.frame(table(pop_denoms$age_5yr_group))
View(pop_county)
pop_county
as.data.frame(table(pop_county$age_5yr_group))
dta <- pop_county %>% filter(year%in%"2010", fips%in%"01001", sex%in%"0", race%in%"H")
dta %>% graduate(Value=pop_denom, Age=age_5yr_group, AgeInt=age2int(age_5yr_group), method="pclm")
dta
dta %>% graduate(Value=pop_county, Age=age_5yr_group, AgeInt=age2int(age_5yr_group), method="pclm")
graduate(Value=dta$pop_county, Age=dta$age_5yr_group, AgeInt=age2int(dta$age_5yr_group), method="pclm")
graduate(Value=dta$pop_county,
Age=dta$age_5yr_group,
AgeInt=age2int(dta$age_5yr_group),
method="pclm",
OAG=TRUE,
OAnew=110)
test <- graduate(Value=dta$pop_county,
Age=dta$age_5yr_group,
AgeInt=age2int(dta$age_5yr_group),
method="pclm",
OAG=TRUE,
OAnew=110)
warnings()
dta
c(0, 1, 5, seq(10:85, by=5))
c(0, 1, 5, seq(10,85, by=5))
sort_age_group <- c(0, 1, 5, seq(10,85, by=5))
pop_county %>% filter(year%in%"2010", fips%in%"01001", sex%in%"0", race%in%"H") %>%
arrange(match(age_5yr_group, sort_age_group))
dta <- pop_county %>% filter(year%in%"2010", fips%in%"01001", sex%in%"0", race%in%"H") %>%
arrange(match(age_5yr_group, sort_age_group))
test <- graduate(Value=dta$pop_county,
Age=dta$age_5yr_group,
AgeInt=age2int(dta$age_5yr_group),
method="pclm",
OAG=TRUE,
OAnew=110)
test
load("/Users/isabelderamos/Desktop/Git/MS_thesis_project/Analysis/2_9_22workspace.RData")
dta
dta <- pop_county %>% filter(year%in%"2010", fips%in%"01001", sex%in%"0", race%in%"H") %>%
arrange(match(age_5yr_group, sort_age_group))
test <- graduate(Value=dta$pop_county,
Age=dta$age_5yr_group,
AgeInt=age2int(dta$age_5yr_group),
method="pclm",
OAG=TRUE,
OAnew=110)
single.age  <- names2age(test)
single.age
plot(single.age, test, type = 'l',
ylab = 'Population',
xlab = 'Age',
main = 'Graduation with pclm')
dta
pop_county %>% filter(year%in%"2010", sex%in%"0", race%in%"H")
pop_county %>% filter(year%in%"2010", sex%in%"0", race%in%"H") %>%
group_by(year, sex, race) %>%
arrange(match(age_5yr_group, sort_age_group))
dta <- pop_county %>% filter(year%in%"2010", sex%in%"0", race%in%"H") %>%
group_by(year, sex, race) %>%
arrange(match(age_5yr_group, sort_age_group))
pclm.grad <- function(dta) {
graduate(Value=dta$pop_county,
Age=dta$age_5yr_group,
AgeInt=age2int(dta$age_5yr_group),
method="pclm",
OAG=TRUE,
OAnew=110)
}
dta <- pop_county %>% filter(year%in%"2010", sex%in%"0", race%in%"H") %>%
group_by(year, sex, race) %>%
arrange(match(age_5yr_group, sort_age_group)) %>%
group_modify(., ~pclm.grad)
pop_county %>% filter(year%in%"2010", sex%in%"0", race%in%"H") %>%
group_by(year, sex, race) %>%
arrange(match(age_5yr_group, sort_age_group)) %>%
group_modify(., ~pclm.grad)
pop_denoms
pop_denoms %>% arrange(age_5yr_group)
unique(pop_denoms$age_5yr_group)
load("/Users/isabelderamos/Desktop/Git/MS_thesis_project/Clean/nchs.rdata")
unique(nchs$age_5yr_group)
load("/Users/isabelderamos/Desktop/Git/MS_thesis_project/Clean/1990_2019_nchs_mortality.rdata")
master_dta
unique(master_dta$age_5yr_group)
master_dta %>% filter(year%in%"1990", fips%in%"01001", sex%in%"0", race%in%"H") %>%
arrange(match(age_5yr_group, sort_age_group))
sort_age_group <- c(0, 1, 5, seq(10,85, by=5))
master_dta %>% filter(year%in%"1990", fips%in%"01001", sex%in%"0", race%in%"H") %>%
arrange(match(age_5yr_group, sort_age_group))
pclm.grad <- function(x) {
graduate(Value=x$pop_county,
Age=x$age_5yr_group,
AgeInt=age2int(x$age_5yr_group),
method="pclm",
OAG=TRUE,
OAnew=110)
}
master_dta %>% filter(year%in%"1990", fips%in%"01001", sex%in%"0", race%in%"H") %>%
arrange(match(age_5yr_group, sort_age_group)) %>%
pclm.grad()
pclm.grad <- function(x) {
graduate(Value=x$pop_denom,
Age=x$age_5yr_group,
AgeInt=age2int(x$age_5yr_group),
method="pclm",
OAG=TRUE,
OAnew=110)
}
master_dta %>% filter(year%in%"1990", fips%in%"01001", sex%in%"0", race%in%"H") %>%
arrange(match(age_5yr_group, sort_age_group)) %>%
pclm.grad()
dta <- master_dta %>% filter(year%in%"1990", fips%in%"01001", sex%in%"0", race%in%"H") %>%
arrange(match(age_5yr_group, sort_age_group))
pclm.grad <- function(x) {
graduate(Value=x$pop_denom,
Age=x$age_5yr_group,
AgeInt=age2int(x$age_5yr_group),
method="pclm",
OAG=TRUE,
OAnew=110)
}
graduate(Value=dta$pop_denom,
Age=dta$age_5yr_group,
AgeInt=age2int(dta$age_5yr_group),
method="pclm",
OAG=TRUE,
OAnew=110)
dta <- master_dta %>% filter(year%in%"1990", fips%in%"01001", sex%in%"0", race%in%"H") %>%
mutate(age_5yr_group=as.numeric(age_5yr_group)) %>%
arrange(match(age_5yr_group, sort_age_group))
dta
pclm.grad <- function(x) {
graduate(Value=x$pop_denom,
Age=x$age_5yr_group,
AgeInt=age2int(x$age_5yr_group),
method="pclm",
OAG=TRUE,
OAnew=110)
}
master_dta %>% filter(year%in%"1990", fips%in%"01001", sex%in%"0", race%in%"H") %>%
mutate(age_5yr_group=as.numeric(age_5yr_group)) %>%
arrange(match(age_5yr_group, sort_age_group)) %>%
pclm.grad()
master_dta
master_dta %>% select(-fips)
master_dta %>% select(-fips)
#~~~~ (1) ggplot helpers ~~~~#
### prep for generating plots ###
select<-dplyr::select
master_dta %>% select(-fips)
master_dta %>% select(-fips) %>%
group_by(age_5yr_group, sex, race, year)
master_dta %>% select(-fips) %>%
group_by(age_5yr_group, sex, race, year) %>%
summarise(count=sum(count, na.rm=T),
pop_denom=sum(pop_denom, na.rm=T))
tmp <- master_dta %>% select(-fips) %>%
group_by(age_5yr_group, sex, race, year) %>%
summarise(count=sum(count, na.rm=T),
pop_denom=sum(pop_denom, na.rm=T))
tmp %>% filter(year%in%"1990", sex%in%"0", race%in%"H") %>%
mutate(age_5yr_group=as.numeric(age_5yr_group)) %>%
arrange(match(age_5yr_group, sort_age_group))
tmp %>% filter(year%in%"1990", sex%in%"0", race%in%"H") %>%
mutate(age_5yr_group=as.numeric(age_5yr_group)) %>%
arrange(match(age_5yr_group, sort_age_group)) %>%
pclm.grad()
pclm.grad <- function(x) {
graduate(Value=x$pop_denom,
Age=x$age_5yr_group,
AgeInt=age2int(x$age_5yr_group),
method="pclm",
OAG=TRUE,
OAnew=110)
single.age  <- names2age(.x)
plot(single.age, .x, type = 'l',
ylab = 'Population',
xlab = 'Age',
main = 'Graduation with pclm')
}
tmp %>% filter(year%in%"1990", sex%in%"0", race%in%"H") %>%
mutate(age_5yr_group=as.numeric(age_5yr_group)) %>%
arrange(match(age_5yr_group, sort_age_group)) %>%
pclm.grad()
pclm.grad <- function(x) {
graduate(Value=x$pop_denom,
Age=x$age_5yr_group,
AgeInt=age2int(x$age_5yr_group),
method="pclm",
OAG=TRUE,
OAnew=110)
single.age  <- names2age(.y)
plot(single.age, .y, type = 'l',
ylab = 'Population',
xlab = 'Age',
main = 'Graduation with pclm')
}
tmp %>% filter(year%in%"1990", sex%in%"0", race%in%"H") %>%
mutate(age_5yr_group=as.numeric(age_5yr_group)) %>%
arrange(match(age_5yr_group, sort_age_group)) %>%
pclm.grad()
pclm.grad <- function(x) {
graduate(Value=x$pop_denom,
Age=x$age_5yr_group,
AgeInt=age2int(x$age_5yr_group),
method="pclm",
OAG=TRUE,
OAnew=110)
}
tmp %>% filter(year%in%"1990", sex%in%"0", race%in%"H") %>%
mutate(age_5yr_group=as.numeric(age_5yr_group)) %>%
arrange(match(age_5yr_group, sort_age_group)) %>%
pclm.grad()
tmp
test<- tmp %>% filter(year%in%"1990", sex%in%"0", race%in%"H") %>%
mutate(age_5yr_group=as.numeric(age_5yr_group)) %>%
arrange(match(age_5yr_group, sort_age_group)) %>%
pclm.grad()
plot(single.age, test, type = 'l',
ylab = 'Population',
xlab = 'Age',
main = 'Graduation with pclm')
single.age  <- names2age(test)
plot(single.age, test, type = 'l',
ylab = 'Population',
xlab = 'Age',
main = 'Graduation with pclm')
test
tmp
names2age(unique(tmp$age_5yr_group))
unique(tmp$age_5yr_group)
tmp %>% filter(year%in%"1990", sex%in%"0", race%in%"H") %>%
mutate(age_5yr_group=as.numeric(age_5yr_group)) %>%
arrange(match(age_5yr_group, sort_age_group))
test2tmp %>% filter(year%in%"1990", sex%in%"0", race%in%"H") %>%
mutate(age_5yr_group=as.numeric(age_5yr_group)) %>%
arrange(match(age_5yr_group, sort_age_group))
test2 <- tmp %>% filter(year%in%"1990", sex%in%"0", race%in%"H") %>%
mutate(age_5yr_group=as.numeric(age_5yr_group)) %>%
arrange(match(age_5yr_group, sort_age_group))
names2age(test2$age_5yr_group)
plot(test2$$age_5yr_group, test2$pop_denom, type = 'l',
ylab = 'Population',
xlab = 'Age',
main = 'Graduation with pclm')
plot(test2$age_5yr_group, test2$pop_denom, type = 'l',
ylab = 'Population',
xlab = 'Age',
main = 'Graduation with pclm')
plot(single.age, test, type = 'l',
ylab = 'Population',
xlab = 'Age',
main = 'Graduation with pclm')
plot(test2$age_5yr_group, test2$pop_denom, type = 'l',
ylab = 'Population',
xlab = 'Age',
main = 'Graduation with pclm')
plot(single.age, test, type = 'l',
ylab = 'Population',
xlab = 'Age',
main = 'Graduation with pclm')
plot(test2$age_5yr_group, test2$pop_denom, type = 'l',
ylab = 'Population',
xlab = 'Age',
main = 'Graduation with pclm')
plot(single.age, test, type = 'l',
ylab = 'Population',
xlab = 'Age',
main = 'Graduation with pclm')
plot(test2$age_5yr_group, test2$pop_denom, type = 'l',
ylab = 'Population',
xlab = 'Age',
main = 'Graduation with pclm')
plot(single.age, test, type = 'l',
ylab = 'Population',
xlab = 'Age',
main = 'Graduation with pclm')
plot(test2$age_5yr_group, test2$pop_denom, type = 'l',
ylab = 'Population',
xlab = 'Age',
main = 'Graduation with pclm')
master_dta %>% select(-fips) %>%
group_by(age_5yr_group, sex, race, year) %>%
summarise(count=sum(count, na.rm=T),
pop_denom=sum(pop_denom, na.rm=T))
master_dta %>% select(-fips) %>%
mutate(age_5yr_group=as.numeric(age_5yr_group)) %>%
group_by(age_5yr_group, sex, race, year) %>%
arrange(match(age_5yr_group, sort_age_group)) %>%
summarise(count=sum(count, na.rm=T),
pop_denom=sum(pop_denom, na.rm=T))
